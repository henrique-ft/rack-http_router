continue
env['REQUEST_PATH'].start_with?(first_level_namespace.to_s)
env['REQUEST_PATH'].start_with?(first_level_namespace)
first_level_namespace
first_leve_namespace
c
continue
first_level_namespace
continue
@routes[env['REQUEST_METHOD']].each { |k, v| p v }
@routes[env['REQUEST_METHOD']].each { |k| p k }
@routes[env['REQUEST_METHOD']].each { |k| p v }
@routes[env['REQUEST_METHOD']].each { |k| p k }
@routes[env['REQUEST_METHOD']].each { |k,v| p k }
@routes[env['REQUEST_METHOD']].each { |k,v| p v }
@routes[env['REQUEST_METHOD']].each { |k,v| p "bunda" }
@routes[env['REQUEST_METHOD']].each { |k,v| p v }
@routes[env['REQUEST_METHOD']]
first_level_namespace
env['REQUEST_PATH']
env['REQUEST_PATH'].start_with?(first_level_namespace)
first_level_namespace
env['REQUEST_PATH']
routes["/v2"]
routes
@routes
c
@routes["GET"]["/v2"]
c
@routes["GET"]["/v2"]
@routes
c
@routes["GET"]["/v2"]
@routes["GET"]["v2"]
@routes["GET"]
@routes
@routes[method.to_s.upcase][joined_namespaces] = { _instances: [] }
routes[method.to_s.upcase][joined_namespaces] = { _instances: [] }
@routes[method.to_s.upcase][joined_namespaces] == nil
first_level_namespace?
exit
@routes["GET"]["v2"]
exit
joined_namespaces
c
joined_namespaces
c
joined_namespaces
c
joined_namespaces
exit
continue
joined_namespaces
@routes[method.to_s.upcase]["/v1"][:_instances]
@routes[method.to_s.upcase]["/v1"]
@routes[method.to_s.upcase][joined_namespaces][:_instances].push(route)
@routes[method.to_s.upcase][joined_namespaces] = { _instances: [] }
@routes[method.to_s.upcase][joined_namespaces]
first_level_namespace?
route
c
route
continue
@routes["GET"]["/v2"]
@routes["GET"]["v2"]
@routes["GET"][:_instances]
@routes["GET"]
routes["GET"]
routes.size
routes
continue
routes.size
routes.each { |k,v| p "a" }
routes.each { |k,v| p k }
routes.each do |k,v| p k end
routes
first_level_namespace
env['REQUEST_PATH']
env['request_path']
continue
binding.local_variables
binding.local_variable_get(:oi)
self.binding.local_variable_set(:oi, "teste")
binding.local_variable_set(:oi, "teste")
binding.local_variable_get(:oi)
binding.local_variables
binding.local_variable_set(:oi, "teste")
binding.local_variable_set(:oi)
binding.local_variables_set(:oi)
binding.local_variables
binding.local_variable_set(:oi, "")
binding.local_variables
self.binding.local_variables
self.binding.methods
self.binding
self
binding.methods
binding
