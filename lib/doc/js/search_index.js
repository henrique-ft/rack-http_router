var search_data = {"index":{"searchIndex":["rackr","action","callback","notfound","router","buildrequest","errors","error","invalidbranchnameerror","invalidcallbackerror","invalidendpointerror","invalidnamedrouteerror","invalidpatherror","undefinednamedrouteerror","route","someclass","someclass2","someclass3","add()","add_error()","add_not_found()","append_branch()","assign()","assign()","call()","call()","call()","check_as()","check_branch_name()","check_callbacks()","check_endpoint()","check_path()","clear_last_branch()","config()","db()","erb()","erb()","error()","html()","html()","html_response()","html_response()","included()","included()","json()","json()","json_response()","json_response()","layout()","layout()","match?()","new()","new()","new()","new()","new()","not_found()","r()","redirect_response()","redirect_response()","redirect_to()","redirect_to()","response()","response()","routes()","text()","text()","text_response()","text_response()","view()","view()","view_response()","view_response()"],"longSearchIndex":["rackr","rackr::action","rackr::callback","rackr::notfound","rackr::router","rackr::router::buildrequest","rackr::router::errors","rackr::router::errors::error","rackr::router::errors::invalidbranchnameerror","rackr::router::errors::invalidcallbackerror","rackr::router::errors::invalidendpointerror","rackr::router::errors::invalidnamedrouteerror","rackr::router::errors::invalidpatherror","rackr::router::errors::undefinednamedrouteerror","rackr::router::route","someclass","someclass2","someclass3","rackr::router#add()","rackr::router#add_error()","rackr::router#add_not_found()","rackr::router#append_branch()","rackr::callback#assign()","rackr::callback::assign()","rackr#call()","rackr::router#call()","rackr::router::buildrequest#call()","rackr::router::errors::check_as()","rackr::router::errors::check_branch_name()","rackr::router::errors::check_callbacks()","rackr::router::errors::check_endpoint()","rackr::router::errors::check_path()","rackr::router#clear_last_branch()","rackr#config()","rackr#db()","rackr::action#erb()","rackr::action::erb()","rackr#error()","rackr::action#html()","rackr::action::html()","rackr::action#html_response()","rackr::action::html_response()","rackr::action::included()","rackr::callback::included()","rackr::action#json()","rackr::action::json()","rackr::action#json_response()","rackr::action::json_response()","rackr::action#layout()","rackr::action::layout()","rackr::router::route#match?()","rackr::new()","rackr::action::new()","rackr::router::new()","rackr::router::buildrequest::new()","rackr::router::route::new()","rackr#not_found()","rackr#r()","rackr::action#redirect_response()","rackr::action::redirect_response()","rackr::action#redirect_to()","rackr::action::redirect_to()","rackr::action#response()","rackr::action::response()","rackr#routes()","rackr::action#text()","rackr::action::text()","rackr::action#text_response()","rackr::action::text_response()","rackr::action#view()","rackr::action::view()","rackr::action#view_response()","rackr::action::view_response()"],"info":[["Rackr","","Rackr.html","",""],["Rackr::Action","","Rackr/Action.html","","<p>Responsable for Rackr Actions behaviour and helpers, can be included in a Ruby class. Rackr main class …\n"],["Rackr::Callback","","Rackr/Callback.html","",""],["Rackr::NotFound","","Rackr/NotFound.html","",""],["Rackr::Router","","Rackr/Router.html","",""],["Rackr::Router::BuildRequest","","Rackr/Router/BuildRequest.html","",""],["Rackr::Router::Errors","","Rackr/Router/Errors.html","",""],["Rackr::Router::Errors::Error","","Rackr/Router/Errors/Error.html","",""],["Rackr::Router::Errors::InvalidBranchNameError","","Rackr/Router/Errors/InvalidBranchNameError.html","",""],["Rackr::Router::Errors::InvalidCallbackError","","Rackr/Router/Errors/InvalidCallbackError.html","",""],["Rackr::Router::Errors::InvalidEndpointError","","Rackr/Router/Errors/InvalidEndpointError.html","",""],["Rackr::Router::Errors::InvalidNamedRouteError","","Rackr/Router/Errors/InvalidNamedRouteError.html","",""],["Rackr::Router::Errors::InvalidPathError","","Rackr/Router/Errors/InvalidPathError.html","",""],["Rackr::Router::Errors::UndefinedNamedRouteError","","Rackr/Router/Errors/UndefinedNamedRouteError.html","",""],["Rackr::Router::Route","","Rackr/Router/Route.html","",""],["SomeClass","","SomeClass.html","",""],["SomeClass2","","SomeClass2.html","",""],["SomeClass3","","SomeClass3.html","",""],["add","Rackr::Router","Rackr/Router.html#method-i-add","(method, path, endpoint, as: nil, route_befores: [], route_afters: [])",""],["add_error","Rackr::Router","Rackr/Router.html#method-i-add_error","(endpoint)",""],["add_not_found","Rackr::Router","Rackr/Router.html#method-i-add_not_found","(endpoint)",""],["append_branch","Rackr::Router","Rackr/Router.html#method-i-append_branch","(name, branch_befores: [], branch_afters: [], as: nil)",""],["assign","Rackr::Callback","Rackr/Callback.html#method-i-assign","(obj, hash)",""],["assign","Rackr::Callback","Rackr/Callback.html#method-c-assign","(obj, hash)",""],["call","Rackr","Rackr.html#method-i-call","(&block)",""],["call","Rackr::Router","Rackr/Router.html#method-i-call","(env)",""],["call","Rackr::Router::BuildRequest","Rackr/Router/BuildRequest.html#method-i-call","(route = nil)",""],["check_as","Rackr::Router::Errors","Rackr/Router/Errors.html#method-c-check_as","(as, path)",""],["check_branch_name","Rackr::Router::Errors","Rackr/Router/Errors.html#method-c-check_branch_name","(path)",""],["check_callbacks","Rackr::Router::Errors","Rackr/Router/Errors.html#method-c-check_callbacks","(callbacks, path)",""],["check_endpoint","Rackr::Router::Errors","Rackr/Router/Errors.html#method-c-check_endpoint","(endpoint, path)",""],["check_path","Rackr::Router::Errors","Rackr/Router/Errors.html#method-c-check_path","(path)",""],["clear_last_branch","Rackr::Router","Rackr/Router.html#method-i-clear_last_branch","()",""],["config","Rackr","Rackr.html#method-i-config","()",""],["db","Rackr","Rackr.html#method-i-db","()",""],["erb","Rackr::Action","Rackr/Action.html#method-i-erb","(content, view_params = {})","<p>Instance alias\n"],["erb","Rackr::Action","Rackr/Action.html#method-c-erb","(content, view_params = {}, config: nil, routes: nil, db: nil)","<p>Render a view using Erubi Engine\n"],["error","Rackr","Rackr.html#method-i-error","(endpoint = -> {}",""],["html","Rackr::Action","Rackr/Action.html#method-i-html","(content, status: 200)","<p>Instance alias\n"],["html","Rackr::Action","Rackr/Action.html#method-c-html","(content, status: 200)","<p>Returns a Rack response as an array with Content-Type: ‘text/html’\n"],["html_response","Rackr::Action","Rackr/Action.html#method-i-html_response","(content, status: 200)","<p>Instance alias\n"],["html_response","Rackr::Action","Rackr/Action.html#method-c-html_response","(content, status: 200)","<p>Returns a Rack Response instance with Content-Type: ‘text/html’\n"],["included","Rackr::Action","Rackr/Action.html#method-c-included","(base)","<p>Used to inject routes and config in classes that include this module\n"],["included","Rackr::Callback","Rackr/Callback.html#method-c-included","(base)",""],["json","Rackr::Action","Rackr/Action.html#method-i-json","(content = {}, status: 200)","<p>Instance alias\n"],["json","Rackr::Action","Rackr/Action.html#method-c-json","(content = {}, status: 200)","<p>Returns a Rack response as an array with Content-Type: ‘application/json’ and json serialize …\n"],["json_response","Rackr::Action","Rackr/Action.html#method-i-json_response","(content = {}, status: 200)","<p>Instance alias\n"],["json_response","Rackr::Action","Rackr/Action.html#method-c-json_response","(content = {}, status: 200)","<p>Returns a Rack Response instance with Content-Type: ‘application/json’ and json serialize\n"],["layout","Rackr::Action","Rackr/Action.html#method-i-layout","(layout_path, file_path)","<p>Instance alias\n"],["layout","Rackr::Action","Rackr/Action.html#method-c-layout","(layout_path, file_path)","<p>Returns an array of paths building a layout for use with <code>view</code> method\n"],["match?","Rackr::Router::Route","Rackr/Router/Route.html#method-i-match-3F","(env)",""],["new","Rackr","Rackr.html#method-c-new","(config = {}, before: [], after: [])",""],["new","Rackr::Action","Rackr/Action.html#method-c-new","(routes: nil, config: nil)","<p>Used to inject routes and config in classes that include this module\n"],["new","Rackr::Router","Rackr/Router.html#method-c-new","(config = {}, before: [], after: [])",""],["new","Rackr::Router::BuildRequest","Rackr/Router/BuildRequest.html#method-c-new","(env, spplited_request_path)",""],["new","Rackr::Router::Route","Rackr/Router/Route.html#method-c-new","(path, endpoint, befores: [], afters: [])",""],["not_found","Rackr","Rackr.html#method-i-not_found","(endpoint = -> {}",""],["r","Rackr","Rackr.html#method-i-r","(name, before: [], after: [], as: nil, &block)",""],["redirect_response","Rackr::Action","Rackr/Action.html#method-i-redirect_response","(url)","<p>Instance alias\n"],["redirect_response","Rackr::Action","Rackr/Action.html#method-c-redirect_response","(url)","<p>Returns a Rack Response instance with Location: the given url and 302 status\n"],["redirect_to","Rackr::Action","Rackr/Action.html#method-i-redirect_to","(url)","<p>Instance alias\n"],["redirect_to","Rackr::Action","Rackr/Action.html#method-c-redirect_to","(url)","<p>Returns a Rack response array with Location: the given url and 302 status\n"],["response","Rackr::Action","Rackr/Action.html#method-i-response","(body = nil, status = 200, headers = {})","<p>Instance alias for creating a Rack::Response\n"],["response","Rackr::Action","Rackr/Action.html#method-c-response","(body = nil, status = 200, headers = {})","<p>Alias for create a new Rack Response instance\n"],["routes","Rackr","Rackr.html#method-i-routes","()",""],["text","Rackr::Action","Rackr/Action.html#method-i-text","(content, status: 200)","<p>Instance alias\n"],["text","Rackr::Action","Rackr/Action.html#method-c-text","(content, status: 200)","<p>Returns a Rack response array with Content-Type: ‘text/plain’\n"],["text_response","Rackr::Action","Rackr/Action.html#method-i-text_response","(content, status: 200)","<p>Instance alias\n"],["text_response","Rackr::Action","Rackr/Action.html#method-c-text_response","(content, status: 200)","<p>Returns a Rack Response instance with Content-Type: ‘text/plain’\n"],["view","Rackr::Action","Rackr/Action.html#method-i-view","( a_path, a_view_params = {}, status: 200, response_instance: false )","<p>Instance alias, injecting config, routes and db\n"],["view","Rackr::Action","Rackr/Action.html#method-c-view","( paths, view_params = {}, status: 200, config: {}, routes: nil, db: nil, response_instance: false )","<p>Get a path (or an array of paths) and params, find a view in a configured views folder (default /views) …\n"],["view_response","Rackr::Action","Rackr/Action.html#method-i-view_response","(a_path, a_view_params = {}, status: 200)","<p>Instance alias, injecting config, routes and db\n"],["view_response","Rackr::Action","Rackr/Action.html#method-c-view_response","( paths, view_params = {}, status: 200, config: {}, routes: nil, db: nil )","<p>Alias for <code>view</code> method, with response_instance: true, that returns an Rack::Response instance\n"]]}}